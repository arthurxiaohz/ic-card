//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1-b02-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.03.15 at 01:11:15 下午 CST 
//


package org.hi.metadata.hsc.context;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilenameFilter;
import java.io.IOException;

import javax.xml.bind.JAXBException;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hi.common.util.JAXBUtil;
import org.hi.metadata.hsc.context.environment.Environment;
import org.hi.metadata.hsc.context.environment.ObjectFactory;



/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the org.hi.generater.context.environment package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class EnvironmentFactory extends ObjectFactory {
	
	/**
	 * 默认生成器的根目录
	 */
	public final static String ENVIRONMENT_DIRECTORY = "generater";
	/**
	 * 环境配置文件文件名
	 */
	public final static String ENVIRONMENT_FILE_NAME = "environment.xml";
	
	/**
	 * 缺省模板文件存放目录 
	 */
	public final static String TEMPLATES_DIR= ENVIRONMENT_DIRECTORY+File.separator+"templates";
	
	/**
	 * 生成器在生成过程中临时文件存放目录
	 */
	public final static String TEMPORARY_DIR= ENVIRONMENT_DIRECTORY+File.separator+"temp";
	
	/**
	 * 默认配置文件的相对路径的完整文件名
	 */
	public final static String ENVIRONMENT_CONFIG_XML_FILE = ENVIRONMENT_DIRECTORY  + File.separator + "config/" + ENVIRONMENT_FILE_NAME;
	
	protected final static Log logger = LogFactory.getLog("org.hi.generator.context.EnvironmentFactory");
	/**
	 * 加载环境配置文件并返回环境配置<code>Environment</code>的实例
	 * @return 返回环境配置对象
	 * @throws JAXBException 如果解析环境配置文件时有错误
	 * @throws FileNotFoundException 如果没有发现environment.xml文件
	 */
	public static Environment loadEnvironment() throws JAXBException, FileNotFoundException{
		return loadEnvironment(ENVIRONMENT_CONFIG_XML_FILE);
	}
	
	/**
	 * 根据指定的文件加载环境配置文件并返回环境配置<code>Environment</code>的实例
	 * @param environmentFile 带相对或绝对路径的环境配置文件名 
	 * @return 返回环境配置对象
	 * @throws JAXBException 如果解析环境配置文件时有错误
	 * @throws FileNotFoundException 如果没有发现给定的环境配置文件
	 */
	public static Environment loadEnvironment(String environmentFile) throws JAXBException, FileNotFoundException{
		Object obj = JAXBUtil.loadObect(Environment.class, environmentFile);
		return (Environment)obj;
	}
	
	/**
	 * @param request
	 * @return
	 * @throws JAXBException
	 * @throws FileNotFoundException
	 */
	public static Environment loadServletEnvironment(String servletRootDir) throws JAXBException, FileNotFoundException{
		File dir = new File(servletRootDir + File.separator + "WEB-INF/config");
		if(!dir.isDirectory()){
			dir = new File(servletRootDir + File.separator + "/config");
		}
		
		File[] files = dir.listFiles(new FilenameFilter(){
			
			public boolean accept(File dir, String name) {
				return name.equals(ENVIRONMENT_FILE_NAME);
			}
			
		});
		if(files.length != 1 )
			return null;
		
		Object obj = JAXBUtil.loadObect(Environment.class, files[0].toString());
		return (Environment)obj;
	}
	
	/**
	 * 将<code>Environment</code>类型的对象写入指定的xml文件
	 * @param environmentFile 指定的xml文件
	 * @param environment <code>Environment</code>类型的对象
	 * @throws JAXBException 如果没有发现给定的环境配置文件
	 * @throws IOException 
	 */
	public static void writeEnvironmentXML(String environmentFile, Environment environment) throws JAXBException, IOException{
		JAXBUtil.writeObject(Environment.class, environment, environmentFile);
	}	
	
	/**
	 * 将<code>Environment</code>类型的对象写入指定的xml文件，缺省的文件地址为APP_HOME/generater/config/environment.xml
	 * @param environment code>Environment</code>类型的对象
	 * @throws JAXBException 如果没有发现给定的环境配置文件
	 * @throws IOException 
	 */
	public static void writeEnvironmentXml(Environment environment) throws JAXBException, IOException{
		writeEnvironmentXML(ENVIRONMENT_CONFIG_XML_FILE, environment);
	}

}
